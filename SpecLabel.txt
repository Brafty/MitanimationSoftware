package DaPackage;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;

public class SpecLabel extends JLabel {
	public static SpecLabel[][] PaintPane=new SpecLabel[128][128];

	static boolean PaintBrush=false;
	static Color UseColor=new Color(0,0,0);
	public static int BrushSize=2;
	int XPos;
	int YPos;
	 public boolean isOver() {
	        return over;
	    }

	    public void setOver(boolean over) {
	        this.over = over;
	        
	    }

	    public Color getColor() {
	        return color;
	    }

	    public void setColor(Color color) {
	        this.color = color;

	        setBackground(color);
	    }

	    public Color getColorOver() {
	        return colorOver;
	    }

	    public void setColorOver(Color colorOver) {
	        this.colorOver = colorOver;
	    }

	    public Color getColorClick() {
	        return colorClick;
	    }

	    public void setColorClick(Color colorClick) {
	        this.colorClick = colorClick;
	    }

	    public Color getBorderColor() {
	        return borderColor;
	    }

	    public void setBorderColor(Color borderColor) {
	        this.borderColor = borderColor;
	    }

	    public int getRadius() {
	        return radius;
	    }

	    public void setRadius(int radius) {
	        this.radius = radius;
	    }

	    public SpecLabel(int XPos,int YPos) {
	       

	    	this.XPos=XPos;
	    	this.YPos=YPos;
	        colorOver = new Color(179, 250, 160);
	        colorClick = new Color(152, 184, 144);
	        borderColor = new Color(30, 136, 56);
	        SpecLabel Reference=this;
	        this.addMouseListener(new MouseListener() {

				@Override
				public void mouseClicked(MouseEvent e) {
					// TODO Auto-generated method stub
					
				}

				@Override
				public void mousePressed(MouseEvent e) {
					// TODO Auto-generated method stub
					PaintBrush=true;
					NeighBourPaint();
				}

				@Override
				public void mouseReleased(MouseEvent e) {
					// TODO Auto-generated method stub
					PaintBrush=false;
				}

				@Override
				public void mouseEntered(MouseEvent e) {
					// TODO Auto-generated method stub
					if(PaintBrush==true) {
						NeighBourPaint();
					}else {
						NeighBourSelect(true);
					}

					

				}

				@Override
				public void mouseExited(MouseEvent e) {
					// TODO Auto-generated method stub
					NeighBourSelect(false);

				}
	        	
	        });
	        
	    }
	    void NeighBourPaint() {
			if(BrushSize%2==1) {

		    	for(int y=BrushSize/2;y>=0;y--) {
		    		for(int x=BrushSize/2;x>=0;x--) {

		    			ChangeColor(this.XPos-x,YPos+y);
		    			ChangeColor(this.XPos+x,YPos+y);
		    			ChangeColor(this.XPos-x,YPos-y);
		    			ChangeColor(this.XPos+x,YPos-y);
		    		}
		    	}
		    }else {

		    	for(int y=BrushSize/2;y>=0;y--) {
		    		for(int x=BrushSize/2;x>=0;x--) {

		    			ChangeColor(this.XPos-x+1,YPos+y-1);
		    			ChangeColor(this.XPos+x,YPos+y-1);
		    			ChangeColor(this.XPos-x+1,YPos-y);
		    			ChangeColor(this.XPos+x,YPos-y);
		    		}
		    	}	    	
		    }	    	
	    }
	    void NeighBourSelect(boolean Select) {

				if(BrushSize%2==1) {

	    	for(int y=BrushSize/2;y>=0;y--) {
	    		for(int x=BrushSize/2;x>=0;x--) {

	    			ChangeBorder(this.XPos-x,YPos+y,Select);
	    			ChangeBorder(this.XPos+x,YPos+y,Select);
	    			ChangeBorder(this.XPos-x,YPos-y,Select);
	    			ChangeBorder(this.XPos+x,YPos-y,Select);
	    		}
	    	}
	    }else {

	    	for(int y=BrushSize/2;y>=0;y--) {
	    		for(int x=BrushSize/2;x>=0;x--) {

	    			ChangeBorder(this.XPos-x+1,YPos+y-1,Select);
	    			ChangeBorder(this.XPos+x,YPos+y-1,Select);
	    			ChangeBorder(this.XPos-x+1,YPos-y,Select);
	    			ChangeBorder(this.XPos+x,YPos-y,Select);
	    		}
	    	}	    	
	    }
	}
	    static void ChangeBorder(int x,int y,boolean Select) {

	    	if(x>-1&&y>-1&&x<128&&y<128) {
	    		if(Select) {
	    		PaintPane[x][y].setBorder(BorderFactory.createLineBorder(DecideBorderColor(PaintPane[x][y].getBackground()),1));
	    		}else {
	    			PaintPane[x][y].setBorder(null);   			
	    		}
	    	}
	    }
	    static void ChangeColor(int x,int y) {

	    	if(x>-1&&y>-1&&x<128&&y<128) {

	    		PaintPane[x][y].setColor(UseColor);;

	    	}
	    }
	    static Color DecideBorderColor(Color PixelColor) {
	    	if(PixelColor.getRed()+PixelColor.getBlue()+PixelColor.getGreen()>200) {
	    		return Color.black;
	    	}
	    	return Color.white;
	    }
	    private boolean over;
	    private Color color;
	    private Color colorOver;
	    private Color colorClick;
	    private Color borderColor;
	    private int radius = 10;


	    @Override
	    protected void paintComponent(Graphics grphcs) {
	    	this.setOpaque(true);
	    	borderColor=Color.black;
	        Graphics2D g2 = (Graphics2D) grphcs;
	        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
	        //  Paint Border
	        g2.setColor(borderColor);
	        g2.fillRoundRect(0, 0, getWidth(), getHeight(), radius, radius);
	        g2.setColor(getBackground());
	        //  Border set 2 Pix
	        g2.fillRoundRect(9, 9, getWidth() - 18, getHeight() - 18, radius, radius);
	        super.paintComponent(grphcs);
	    }
}
